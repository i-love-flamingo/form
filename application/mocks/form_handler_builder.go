// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	application "flamingo.me/form/application"
	domain "flamingo.me/form/domain"

	mock "github.com/stretchr/testify/mock"
)

// FormHandlerBuilder is an autogenerated mock type for the FormHandlerBuilder type
type FormHandlerBuilder struct {
	mock.Mock
}

// AddFormExtension provides a mock function with given fields: formExtension
func (_m *FormHandlerBuilder) AddFormExtension(formExtension domain.FormExtension) error {
	ret := _m.Called(formExtension)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.FormExtension) error); ok {
		r0 = rf(formExtension)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddNamedFormExtension provides a mock function with given fields: name
func (_m *FormHandlerBuilder) AddNamedFormExtension(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Build provides a mock function with given fields:
func (_m *FormHandlerBuilder) Build() domain.FormHandler {
	ret := _m.Called()

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func() domain.FormHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// Must provides a mock function with given fields: err
func (_m *FormHandlerBuilder) Must(err error) application.FormHandlerBuilder {
	ret := _m.Called(err)

	var r0 application.FormHandlerBuilder
	if rf, ok := ret.Get(0).(func(error) application.FormHandlerBuilder); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.FormHandlerBuilder)
		}
	}

	return r0
}

// SetFormDataDecoder provides a mock function with given fields: formDataDecoder
func (_m *FormHandlerBuilder) SetFormDataDecoder(formDataDecoder domain.FormDataDecoder) application.FormHandlerBuilder {
	ret := _m.Called(formDataDecoder)

	var r0 application.FormHandlerBuilder
	if rf, ok := ret.Get(0).(func(domain.FormDataDecoder) application.FormHandlerBuilder); ok {
		r0 = rf(formDataDecoder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.FormHandlerBuilder)
		}
	}

	return r0
}

// SetFormDataProvider provides a mock function with given fields: formDataProvider
func (_m *FormHandlerBuilder) SetFormDataProvider(formDataProvider domain.FormDataProvider) application.FormHandlerBuilder {
	ret := _m.Called(formDataProvider)

	var r0 application.FormHandlerBuilder
	if rf, ok := ret.Get(0).(func(domain.FormDataProvider) application.FormHandlerBuilder); ok {
		r0 = rf(formDataProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.FormHandlerBuilder)
		}
	}

	return r0
}

// SetFormDataValidator provides a mock function with given fields: formDataValidator
func (_m *FormHandlerBuilder) SetFormDataValidator(formDataValidator domain.FormDataValidator) application.FormHandlerBuilder {
	ret := _m.Called(formDataValidator)

	var r0 application.FormHandlerBuilder
	if rf, ok := ret.Get(0).(func(domain.FormDataValidator) application.FormHandlerBuilder); ok {
		r0 = rf(formDataValidator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.FormHandlerBuilder)
		}
	}

	return r0
}

// SetFormService provides a mock function with given fields: formService
func (_m *FormHandlerBuilder) SetFormService(formService domain.FormService) error {
	ret := _m.Called(formService)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.FormService) error); ok {
		r0 = rf(formService)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNamedFormDataDecoder provides a mock function with given fields: name
func (_m *FormHandlerBuilder) SetNamedFormDataDecoder(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNamedFormDataProvider provides a mock function with given fields: name
func (_m *FormHandlerBuilder) SetNamedFormDataProvider(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNamedFormDataValidator provides a mock function with given fields: name
func (_m *FormHandlerBuilder) SetNamedFormDataValidator(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNamedFormService provides a mock function with given fields: name
func (_m *FormHandlerBuilder) SetNamedFormService(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
