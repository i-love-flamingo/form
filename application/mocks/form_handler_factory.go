// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	application "flamingo.me/form/application"
	domain "flamingo.me/form/domain"

	mock "github.com/stretchr/testify/mock"
)

// FormHandlerFactory is an autogenerated mock type for the FormHandlerFactory type
type FormHandlerFactory struct {
	mock.Mock
}

type FormHandlerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *FormHandlerFactory) EXPECT() *FormHandlerFactory_Expecter {
	return &FormHandlerFactory_Expecter{mock: &_m.Mock}
}

// CreateFormHandlerWithFormService provides a mock function with given fields: formService, formExtensions
func (_m *FormHandlerFactory) CreateFormHandlerWithFormService(formService domain.FormService, formExtensions ...string) domain.FormHandler {
	_va := make([]interface{}, len(formExtensions))
	for _i := range formExtensions {
		_va[_i] = formExtensions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, formService)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFormHandlerWithFormService")
	}

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func(domain.FormService, ...string) domain.FormHandler); ok {
		r0 = rf(formService, formExtensions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// FormHandlerFactory_CreateFormHandlerWithFormService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFormHandlerWithFormService'
type FormHandlerFactory_CreateFormHandlerWithFormService_Call struct {
	*mock.Call
}

// CreateFormHandlerWithFormService is a helper method to define mock.On call
//   - formService domain.FormService
//   - formExtensions ...string
func (_e *FormHandlerFactory_Expecter) CreateFormHandlerWithFormService(formService interface{}, formExtensions ...interface{}) *FormHandlerFactory_CreateFormHandlerWithFormService_Call {
	return &FormHandlerFactory_CreateFormHandlerWithFormService_Call{Call: _e.mock.On("CreateFormHandlerWithFormService",
		append([]interface{}{formService}, formExtensions...)...)}
}

func (_c *FormHandlerFactory_CreateFormHandlerWithFormService_Call) Run(run func(formService domain.FormService, formExtensions ...string)) *FormHandlerFactory_CreateFormHandlerWithFormService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(domain.FormService), variadicArgs...)
	})
	return _c
}

func (_c *FormHandlerFactory_CreateFormHandlerWithFormService_Call) Return(_a0 domain.FormHandler) *FormHandlerFactory_CreateFormHandlerWithFormService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormHandlerFactory_CreateFormHandlerWithFormService_Call) RunAndReturn(run func(domain.FormService, ...string) domain.FormHandler) *FormHandlerFactory_CreateFormHandlerWithFormService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFormHandlerWithFormServices provides a mock function with given fields: formDataProvider, formDataDecoder, formDataValidator, formExtensions
func (_m *FormHandlerFactory) CreateFormHandlerWithFormServices(formDataProvider domain.FormDataProvider, formDataDecoder domain.FormDataDecoder, formDataValidator domain.FormDataValidator, formExtensions ...string) domain.FormHandler {
	_va := make([]interface{}, len(formExtensions))
	for _i := range formExtensions {
		_va[_i] = formExtensions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, formDataProvider, formDataDecoder, formDataValidator)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFormHandlerWithFormServices")
	}

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func(domain.FormDataProvider, domain.FormDataDecoder, domain.FormDataValidator, ...string) domain.FormHandler); ok {
		r0 = rf(formDataProvider, formDataDecoder, formDataValidator, formExtensions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// FormHandlerFactory_CreateFormHandlerWithFormServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFormHandlerWithFormServices'
type FormHandlerFactory_CreateFormHandlerWithFormServices_Call struct {
	*mock.Call
}

// CreateFormHandlerWithFormServices is a helper method to define mock.On call
//   - formDataProvider domain.FormDataProvider
//   - formDataDecoder domain.FormDataDecoder
//   - formDataValidator domain.FormDataValidator
//   - formExtensions ...string
func (_e *FormHandlerFactory_Expecter) CreateFormHandlerWithFormServices(formDataProvider interface{}, formDataDecoder interface{}, formDataValidator interface{}, formExtensions ...interface{}) *FormHandlerFactory_CreateFormHandlerWithFormServices_Call {
	return &FormHandlerFactory_CreateFormHandlerWithFormServices_Call{Call: _e.mock.On("CreateFormHandlerWithFormServices",
		append([]interface{}{formDataProvider, formDataDecoder, formDataValidator}, formExtensions...)...)}
}

func (_c *FormHandlerFactory_CreateFormHandlerWithFormServices_Call) Run(run func(formDataProvider domain.FormDataProvider, formDataDecoder domain.FormDataDecoder, formDataValidator domain.FormDataValidator, formExtensions ...string)) *FormHandlerFactory_CreateFormHandlerWithFormServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(domain.FormDataProvider), args[1].(domain.FormDataDecoder), args[2].(domain.FormDataValidator), variadicArgs...)
	})
	return _c
}

func (_c *FormHandlerFactory_CreateFormHandlerWithFormServices_Call) Return(_a0 domain.FormHandler) *FormHandlerFactory_CreateFormHandlerWithFormServices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormHandlerFactory_CreateFormHandlerWithFormServices_Call) RunAndReturn(run func(domain.FormDataProvider, domain.FormDataDecoder, domain.FormDataValidator, ...string) domain.FormHandler) *FormHandlerFactory_CreateFormHandlerWithFormServices_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSimpleFormHandler provides a mock function with no fields
func (_m *FormHandlerFactory) CreateSimpleFormHandler() domain.FormHandler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSimpleFormHandler")
	}

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func() domain.FormHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// FormHandlerFactory_CreateSimpleFormHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSimpleFormHandler'
type FormHandlerFactory_CreateSimpleFormHandler_Call struct {
	*mock.Call
}

// CreateSimpleFormHandler is a helper method to define mock.On call
func (_e *FormHandlerFactory_Expecter) CreateSimpleFormHandler() *FormHandlerFactory_CreateSimpleFormHandler_Call {
	return &FormHandlerFactory_CreateSimpleFormHandler_Call{Call: _e.mock.On("CreateSimpleFormHandler")}
}

func (_c *FormHandlerFactory_CreateSimpleFormHandler_Call) Run(run func()) *FormHandlerFactory_CreateSimpleFormHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FormHandlerFactory_CreateSimpleFormHandler_Call) Return(_a0 domain.FormHandler) *FormHandlerFactory_CreateSimpleFormHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormHandlerFactory_CreateSimpleFormHandler_Call) RunAndReturn(run func() domain.FormHandler) *FormHandlerFactory_CreateSimpleFormHandler_Call {
	_c.Call.Return(run)
	return _c
}

// GetFormHandlerBuilder provides a mock function with no fields
func (_m *FormHandlerFactory) GetFormHandlerBuilder() application.FormHandlerBuilder {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFormHandlerBuilder")
	}

	var r0 application.FormHandlerBuilder
	if rf, ok := ret.Get(0).(func() application.FormHandlerBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.FormHandlerBuilder)
		}
	}

	return r0
}

// FormHandlerFactory_GetFormHandlerBuilder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFormHandlerBuilder'
type FormHandlerFactory_GetFormHandlerBuilder_Call struct {
	*mock.Call
}

// GetFormHandlerBuilder is a helper method to define mock.On call
func (_e *FormHandlerFactory_Expecter) GetFormHandlerBuilder() *FormHandlerFactory_GetFormHandlerBuilder_Call {
	return &FormHandlerFactory_GetFormHandlerBuilder_Call{Call: _e.mock.On("GetFormHandlerBuilder")}
}

func (_c *FormHandlerFactory_GetFormHandlerBuilder_Call) Run(run func()) *FormHandlerFactory_GetFormHandlerBuilder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FormHandlerFactory_GetFormHandlerBuilder_Call) Return(_a0 application.FormHandlerBuilder) *FormHandlerFactory_GetFormHandlerBuilder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FormHandlerFactory_GetFormHandlerBuilder_Call) RunAndReturn(run func() application.FormHandlerBuilder) *FormHandlerFactory_GetFormHandlerBuilder_Call {
	_c.Call.Return(run)
	return _c
}

// NewFormHandlerFactory creates a new instance of FormHandlerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormHandlerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *FormHandlerFactory {
	mock := &FormHandlerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
