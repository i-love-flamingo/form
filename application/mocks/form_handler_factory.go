// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	application "flamingo.me/form/application"
	domain "flamingo.me/form/domain"

	mock "github.com/stretchr/testify/mock"
)

// FormHandlerFactory is an autogenerated mock type for the FormHandlerFactory type
type FormHandlerFactory struct {
	mock.Mock
}

// CreateFormHandlerWithFormService provides a mock function with given fields: formService, formExtensions
func (_m *FormHandlerFactory) CreateFormHandlerWithFormService(formService domain.FormService, formExtensions ...string) domain.FormHandler {
	_va := make([]interface{}, len(formExtensions))
	for _i := range formExtensions {
		_va[_i] = formExtensions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, formService)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func(domain.FormService, ...string) domain.FormHandler); ok {
		r0 = rf(formService, formExtensions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// CreateFormHandlerWithFormServices provides a mock function with given fields: formDataProvider, formDataDecoder, formDataValidator, formExtensions
func (_m *FormHandlerFactory) CreateFormHandlerWithFormServices(formDataProvider domain.FormDataProvider, formDataDecoder domain.FormDataDecoder, formDataValidator domain.FormDataValidator, formExtensions ...string) domain.FormHandler {
	_va := make([]interface{}, len(formExtensions))
	for _i := range formExtensions {
		_va[_i] = formExtensions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, formDataProvider, formDataDecoder, formDataValidator)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func(domain.FormDataProvider, domain.FormDataDecoder, domain.FormDataValidator, ...string) domain.FormHandler); ok {
		r0 = rf(formDataProvider, formDataDecoder, formDataValidator, formExtensions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// CreateSimpleFormHandler provides a mock function with given fields:
func (_m *FormHandlerFactory) CreateSimpleFormHandler() domain.FormHandler {
	ret := _m.Called()

	var r0 domain.FormHandler
	if rf, ok := ret.Get(0).(func() domain.FormHandler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.FormHandler)
		}
	}

	return r0
}

// GetFormHandlerBuilder provides a mock function with given fields:
func (_m *FormHandlerFactory) GetFormHandlerBuilder() application.FormHandlerBuilder {
	ret := _m.Called()

	var r0 application.FormHandlerBuilder
	if rf, ok := ret.Get(0).(func() application.FormHandlerBuilder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.FormHandlerBuilder)
		}
	}

	return r0
}
