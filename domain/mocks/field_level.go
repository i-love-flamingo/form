// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// FieldLevel is an autogenerated mock type for the FieldLevel type
type FieldLevel struct {
	mock.Mock
}

type FieldLevel_Expecter struct {
	mock *mock.Mock
}

func (_m *FieldLevel) EXPECT() *FieldLevel_Expecter {
	return &FieldLevel_Expecter{mock: &_m.Mock}
}

// ExtractType provides a mock function with given fields: field
func (_m *FieldLevel) ExtractType(field reflect.Value) (reflect.Value, reflect.Kind, bool) {
	ret := _m.Called(field)

	if len(ret) == 0 {
		panic("no return value specified for ExtractType")
	}

	var r0 reflect.Value
	var r1 reflect.Kind
	var r2 bool
	if rf, ok := ret.Get(0).(func(reflect.Value) (reflect.Value, reflect.Kind, bool)); ok {
		return rf(field)
	}
	if rf, ok := ret.Get(0).(func(reflect.Value) reflect.Value); ok {
		r0 = rf(field)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	if rf, ok := ret.Get(1).(func(reflect.Value) reflect.Kind); ok {
		r1 = rf(field)
	} else {
		r1 = ret.Get(1).(reflect.Kind)
	}

	if rf, ok := ret.Get(2).(func(reflect.Value) bool); ok {
		r2 = rf(field)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// FieldLevel_ExtractType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractType'
type FieldLevel_ExtractType_Call struct {
	*mock.Call
}

// ExtractType is a helper method to define mock.On call
//   - field reflect.Value
func (_e *FieldLevel_Expecter) ExtractType(field interface{}) *FieldLevel_ExtractType_Call {
	return &FieldLevel_ExtractType_Call{Call: _e.mock.On("ExtractType", field)}
}

func (_c *FieldLevel_ExtractType_Call) Run(run func(field reflect.Value)) *FieldLevel_ExtractType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Value))
	})
	return _c
}

func (_c *FieldLevel_ExtractType_Call) Return(value reflect.Value, kind reflect.Kind, nullable bool) *FieldLevel_ExtractType_Call {
	_c.Call.Return(value, kind, nullable)
	return _c
}

func (_c *FieldLevel_ExtractType_Call) RunAndReturn(run func(reflect.Value) (reflect.Value, reflect.Kind, bool)) *FieldLevel_ExtractType_Call {
	_c.Call.Return(run)
	return _c
}

// Field provides a mock function with given fields:
func (_m *FieldLevel) Field() reflect.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Field")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// FieldLevel_Field_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Field'
type FieldLevel_Field_Call struct {
	*mock.Call
}

// Field is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) Field() *FieldLevel_Field_Call {
	return &FieldLevel_Field_Call{Call: _e.mock.On("Field")}
}

func (_c *FieldLevel_Field_Call) Run(run func()) *FieldLevel_Field_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_Field_Call) Return(_a0 reflect.Value) *FieldLevel_Field_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_Field_Call) RunAndReturn(run func() reflect.Value) *FieldLevel_Field_Call {
	_c.Call.Return(run)
	return _c
}

// FieldName provides a mock function with given fields:
func (_m *FieldLevel) FieldName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FieldName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldLevel_FieldName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FieldName'
type FieldLevel_FieldName_Call struct {
	*mock.Call
}

// FieldName is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) FieldName() *FieldLevel_FieldName_Call {
	return &FieldLevel_FieldName_Call{Call: _e.mock.On("FieldName")}
}

func (_c *FieldLevel_FieldName_Call) Run(run func()) *FieldLevel_FieldName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_FieldName_Call) Return(_a0 string) *FieldLevel_FieldName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_FieldName_Call) RunAndReturn(run func() string) *FieldLevel_FieldName_Call {
	_c.Call.Return(run)
	return _c
}

// GetStructFieldOK provides a mock function with given fields:
func (_m *FieldLevel) GetStructFieldOK() (reflect.Value, reflect.Kind, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStructFieldOK")
	}

	var r0 reflect.Value
	var r1 reflect.Kind
	var r2 bool
	if rf, ok := ret.Get(0).(func() (reflect.Value, reflect.Kind, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	if rf, ok := ret.Get(1).(func() reflect.Kind); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(reflect.Kind)
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// FieldLevel_GetStructFieldOK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructFieldOK'
type FieldLevel_GetStructFieldOK_Call struct {
	*mock.Call
}

// GetStructFieldOK is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) GetStructFieldOK() *FieldLevel_GetStructFieldOK_Call {
	return &FieldLevel_GetStructFieldOK_Call{Call: _e.mock.On("GetStructFieldOK")}
}

func (_c *FieldLevel_GetStructFieldOK_Call) Run(run func()) *FieldLevel_GetStructFieldOK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_GetStructFieldOK_Call) Return(_a0 reflect.Value, _a1 reflect.Kind, _a2 bool) *FieldLevel_GetStructFieldOK_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FieldLevel_GetStructFieldOK_Call) RunAndReturn(run func() (reflect.Value, reflect.Kind, bool)) *FieldLevel_GetStructFieldOK_Call {
	_c.Call.Return(run)
	return _c
}

// GetStructFieldOK2 provides a mock function with given fields:
func (_m *FieldLevel) GetStructFieldOK2() (reflect.Value, reflect.Kind, bool, bool) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStructFieldOK2")
	}

	var r0 reflect.Value
	var r1 reflect.Kind
	var r2 bool
	var r3 bool
	if rf, ok := ret.Get(0).(func() (reflect.Value, reflect.Kind, bool, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	if rf, ok := ret.Get(1).(func() reflect.Kind); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(reflect.Kind)
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func() bool); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(bool)
	}

	return r0, r1, r2, r3
}

// FieldLevel_GetStructFieldOK2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructFieldOK2'
type FieldLevel_GetStructFieldOK2_Call struct {
	*mock.Call
}

// GetStructFieldOK2 is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) GetStructFieldOK2() *FieldLevel_GetStructFieldOK2_Call {
	return &FieldLevel_GetStructFieldOK2_Call{Call: _e.mock.On("GetStructFieldOK2")}
}

func (_c *FieldLevel_GetStructFieldOK2_Call) Run(run func()) *FieldLevel_GetStructFieldOK2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_GetStructFieldOK2_Call) Return(_a0 reflect.Value, _a1 reflect.Kind, _a2 bool, _a3 bool) *FieldLevel_GetStructFieldOK2_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *FieldLevel_GetStructFieldOK2_Call) RunAndReturn(run func() (reflect.Value, reflect.Kind, bool, bool)) *FieldLevel_GetStructFieldOK2_Call {
	_c.Call.Return(run)
	return _c
}

// GetStructFieldOKAdvanced provides a mock function with given fields: val, namespace
func (_m *FieldLevel) GetStructFieldOKAdvanced(val reflect.Value, namespace string) (reflect.Value, reflect.Kind, bool) {
	ret := _m.Called(val, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetStructFieldOKAdvanced")
	}

	var r0 reflect.Value
	var r1 reflect.Kind
	var r2 bool
	if rf, ok := ret.Get(0).(func(reflect.Value, string) (reflect.Value, reflect.Kind, bool)); ok {
		return rf(val, namespace)
	}
	if rf, ok := ret.Get(0).(func(reflect.Value, string) reflect.Value); ok {
		r0 = rf(val, namespace)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	if rf, ok := ret.Get(1).(func(reflect.Value, string) reflect.Kind); ok {
		r1 = rf(val, namespace)
	} else {
		r1 = ret.Get(1).(reflect.Kind)
	}

	if rf, ok := ret.Get(2).(func(reflect.Value, string) bool); ok {
		r2 = rf(val, namespace)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// FieldLevel_GetStructFieldOKAdvanced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructFieldOKAdvanced'
type FieldLevel_GetStructFieldOKAdvanced_Call struct {
	*mock.Call
}

// GetStructFieldOKAdvanced is a helper method to define mock.On call
//   - val reflect.Value
//   - namespace string
func (_e *FieldLevel_Expecter) GetStructFieldOKAdvanced(val interface{}, namespace interface{}) *FieldLevel_GetStructFieldOKAdvanced_Call {
	return &FieldLevel_GetStructFieldOKAdvanced_Call{Call: _e.mock.On("GetStructFieldOKAdvanced", val, namespace)}
}

func (_c *FieldLevel_GetStructFieldOKAdvanced_Call) Run(run func(val reflect.Value, namespace string)) *FieldLevel_GetStructFieldOKAdvanced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Value), args[1].(string))
	})
	return _c
}

func (_c *FieldLevel_GetStructFieldOKAdvanced_Call) Return(_a0 reflect.Value, _a1 reflect.Kind, _a2 bool) *FieldLevel_GetStructFieldOKAdvanced_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FieldLevel_GetStructFieldOKAdvanced_Call) RunAndReturn(run func(reflect.Value, string) (reflect.Value, reflect.Kind, bool)) *FieldLevel_GetStructFieldOKAdvanced_Call {
	_c.Call.Return(run)
	return _c
}

// GetStructFieldOKAdvanced2 provides a mock function with given fields: val, namespace
func (_m *FieldLevel) GetStructFieldOKAdvanced2(val reflect.Value, namespace string) (reflect.Value, reflect.Kind, bool, bool) {
	ret := _m.Called(val, namespace)

	if len(ret) == 0 {
		panic("no return value specified for GetStructFieldOKAdvanced2")
	}

	var r0 reflect.Value
	var r1 reflect.Kind
	var r2 bool
	var r3 bool
	if rf, ok := ret.Get(0).(func(reflect.Value, string) (reflect.Value, reflect.Kind, bool, bool)); ok {
		return rf(val, namespace)
	}
	if rf, ok := ret.Get(0).(func(reflect.Value, string) reflect.Value); ok {
		r0 = rf(val, namespace)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	if rf, ok := ret.Get(1).(func(reflect.Value, string) reflect.Kind); ok {
		r1 = rf(val, namespace)
	} else {
		r1 = ret.Get(1).(reflect.Kind)
	}

	if rf, ok := ret.Get(2).(func(reflect.Value, string) bool); ok {
		r2 = rf(val, namespace)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(reflect.Value, string) bool); ok {
		r3 = rf(val, namespace)
	} else {
		r3 = ret.Get(3).(bool)
	}

	return r0, r1, r2, r3
}

// FieldLevel_GetStructFieldOKAdvanced2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStructFieldOKAdvanced2'
type FieldLevel_GetStructFieldOKAdvanced2_Call struct {
	*mock.Call
}

// GetStructFieldOKAdvanced2 is a helper method to define mock.On call
//   - val reflect.Value
//   - namespace string
func (_e *FieldLevel_Expecter) GetStructFieldOKAdvanced2(val interface{}, namespace interface{}) *FieldLevel_GetStructFieldOKAdvanced2_Call {
	return &FieldLevel_GetStructFieldOKAdvanced2_Call{Call: _e.mock.On("GetStructFieldOKAdvanced2", val, namespace)}
}

func (_c *FieldLevel_GetStructFieldOKAdvanced2_Call) Run(run func(val reflect.Value, namespace string)) *FieldLevel_GetStructFieldOKAdvanced2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Value), args[1].(string))
	})
	return _c
}

func (_c *FieldLevel_GetStructFieldOKAdvanced2_Call) Return(_a0 reflect.Value, _a1 reflect.Kind, _a2 bool, _a3 bool) *FieldLevel_GetStructFieldOKAdvanced2_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *FieldLevel_GetStructFieldOKAdvanced2_Call) RunAndReturn(run func(reflect.Value, string) (reflect.Value, reflect.Kind, bool, bool)) *FieldLevel_GetStructFieldOKAdvanced2_Call {
	_c.Call.Return(run)
	return _c
}

// GetTag provides a mock function with given fields:
func (_m *FieldLevel) GetTag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldLevel_GetTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTag'
type FieldLevel_GetTag_Call struct {
	*mock.Call
}

// GetTag is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) GetTag() *FieldLevel_GetTag_Call {
	return &FieldLevel_GetTag_Call{Call: _e.mock.On("GetTag")}
}

func (_c *FieldLevel_GetTag_Call) Run(run func()) *FieldLevel_GetTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_GetTag_Call) Return(_a0 string) *FieldLevel_GetTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_GetTag_Call) RunAndReturn(run func() string) *FieldLevel_GetTag_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function with given fields:
func (_m *FieldLevel) Param() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldLevel_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type FieldLevel_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) Param() *FieldLevel_Param_Call {
	return &FieldLevel_Param_Call{Call: _e.mock.On("Param")}
}

func (_c *FieldLevel_Param_Call) Run(run func()) *FieldLevel_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_Param_Call) Return(_a0 string) *FieldLevel_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_Param_Call) RunAndReturn(run func() string) *FieldLevel_Param_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function with given fields:
func (_m *FieldLevel) Parent() reflect.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parent")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// FieldLevel_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'
type FieldLevel_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) Parent() *FieldLevel_Parent_Call {
	return &FieldLevel_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *FieldLevel_Parent_Call) Run(run func()) *FieldLevel_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_Parent_Call) Return(_a0 reflect.Value) *FieldLevel_Parent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_Parent_Call) RunAndReturn(run func() reflect.Value) *FieldLevel_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// StructFieldName provides a mock function with given fields:
func (_m *FieldLevel) StructFieldName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StructFieldName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldLevel_StructFieldName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StructFieldName'
type FieldLevel_StructFieldName_Call struct {
	*mock.Call
}

// StructFieldName is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) StructFieldName() *FieldLevel_StructFieldName_Call {
	return &FieldLevel_StructFieldName_Call{Call: _e.mock.On("StructFieldName")}
}

func (_c *FieldLevel_StructFieldName_Call) Run(run func()) *FieldLevel_StructFieldName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_StructFieldName_Call) Return(_a0 string) *FieldLevel_StructFieldName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_StructFieldName_Call) RunAndReturn(run func() string) *FieldLevel_StructFieldName_Call {
	_c.Call.Return(run)
	return _c
}

// Top provides a mock function with given fields:
func (_m *FieldLevel) Top() reflect.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Top")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// FieldLevel_Top_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Top'
type FieldLevel_Top_Call struct {
	*mock.Call
}

// Top is a helper method to define mock.On call
func (_e *FieldLevel_Expecter) Top() *FieldLevel_Top_Call {
	return &FieldLevel_Top_Call{Call: _e.mock.On("Top")}
}

func (_c *FieldLevel_Top_Call) Run(run func()) *FieldLevel_Top_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldLevel_Top_Call) Return(_a0 reflect.Value) *FieldLevel_Top_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldLevel_Top_Call) RunAndReturn(run func() reflect.Value) *FieldLevel_Top_Call {
	_c.Call.Return(run)
	return _c
}

// NewFieldLevel creates a new instance of FieldLevel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFieldLevel(t interface {
	mock.TestingT
	Cleanup(func())
}) *FieldLevel {
	mock := &FieldLevel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
