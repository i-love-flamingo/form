// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"

	ut "github.com/go-playground/universal-translator"
)

// FieldError is an autogenerated mock type for the FieldError type
type FieldError struct {
	mock.Mock
}

type FieldError_Expecter struct {
	mock *mock.Mock
}

func (_m *FieldError) EXPECT() *FieldError_Expecter {
	return &FieldError_Expecter{mock: &_m.Mock}
}

// ActualTag provides a mock function with no fields
func (_m *FieldError) ActualTag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ActualTag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_ActualTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActualTag'
type FieldError_ActualTag_Call struct {
	*mock.Call
}

// ActualTag is a helper method to define mock.On call
func (_e *FieldError_Expecter) ActualTag() *FieldError_ActualTag_Call {
	return &FieldError_ActualTag_Call{Call: _e.mock.On("ActualTag")}
}

func (_c *FieldError_ActualTag_Call) Run(run func()) *FieldError_ActualTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_ActualTag_Call) Return(_a0 string) *FieldError_ActualTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_ActualTag_Call) RunAndReturn(run func() string) *FieldError_ActualTag_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with no fields
func (_m *FieldError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type FieldError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *FieldError_Expecter) Error() *FieldError_Error_Call {
	return &FieldError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *FieldError_Error_Call) Run(run func()) *FieldError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Error_Call) Return(_a0 string) *FieldError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Error_Call) RunAndReturn(run func() string) *FieldError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Field provides a mock function with no fields
func (_m *FieldError) Field() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Field")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_Field_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Field'
type FieldError_Field_Call struct {
	*mock.Call
}

// Field is a helper method to define mock.On call
func (_e *FieldError_Expecter) Field() *FieldError_Field_Call {
	return &FieldError_Field_Call{Call: _e.mock.On("Field")}
}

func (_c *FieldError_Field_Call) Run(run func()) *FieldError_Field_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Field_Call) Return(_a0 string) *FieldError_Field_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Field_Call) RunAndReturn(run func() string) *FieldError_Field_Call {
	_c.Call.Return(run)
	return _c
}

// Kind provides a mock function with no fields
func (_m *FieldError) Kind() reflect.Kind {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Kind")
	}

	var r0 reflect.Kind
	if rf, ok := ret.Get(0).(func() reflect.Kind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Kind)
	}

	return r0
}

// FieldError_Kind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kind'
type FieldError_Kind_Call struct {
	*mock.Call
}

// Kind is a helper method to define mock.On call
func (_e *FieldError_Expecter) Kind() *FieldError_Kind_Call {
	return &FieldError_Kind_Call{Call: _e.mock.On("Kind")}
}

func (_c *FieldError_Kind_Call) Run(run func()) *FieldError_Kind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Kind_Call) Return(_a0 reflect.Kind) *FieldError_Kind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Kind_Call) RunAndReturn(run func() reflect.Kind) *FieldError_Kind_Call {
	_c.Call.Return(run)
	return _c
}

// Namespace provides a mock function with no fields
func (_m *FieldError) Namespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Namespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_Namespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Namespace'
type FieldError_Namespace_Call struct {
	*mock.Call
}

// Namespace is a helper method to define mock.On call
func (_e *FieldError_Expecter) Namespace() *FieldError_Namespace_Call {
	return &FieldError_Namespace_Call{Call: _e.mock.On("Namespace")}
}

func (_c *FieldError_Namespace_Call) Run(run func()) *FieldError_Namespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Namespace_Call) Return(_a0 string) *FieldError_Namespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Namespace_Call) RunAndReturn(run func() string) *FieldError_Namespace_Call {
	_c.Call.Return(run)
	return _c
}

// Param provides a mock function with no fields
func (_m *FieldError) Param() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Param")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_Param_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Param'
type FieldError_Param_Call struct {
	*mock.Call
}

// Param is a helper method to define mock.On call
func (_e *FieldError_Expecter) Param() *FieldError_Param_Call {
	return &FieldError_Param_Call{Call: _e.mock.On("Param")}
}

func (_c *FieldError_Param_Call) Run(run func()) *FieldError_Param_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Param_Call) Return(_a0 string) *FieldError_Param_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Param_Call) RunAndReturn(run func() string) *FieldError_Param_Call {
	_c.Call.Return(run)
	return _c
}

// StructField provides a mock function with no fields
func (_m *FieldError) StructField() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StructField")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_StructField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StructField'
type FieldError_StructField_Call struct {
	*mock.Call
}

// StructField is a helper method to define mock.On call
func (_e *FieldError_Expecter) StructField() *FieldError_StructField_Call {
	return &FieldError_StructField_Call{Call: _e.mock.On("StructField")}
}

func (_c *FieldError_StructField_Call) Run(run func()) *FieldError_StructField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_StructField_Call) Return(_a0 string) *FieldError_StructField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_StructField_Call) RunAndReturn(run func() string) *FieldError_StructField_Call {
	_c.Call.Return(run)
	return _c
}

// StructNamespace provides a mock function with no fields
func (_m *FieldError) StructNamespace() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StructNamespace")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_StructNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StructNamespace'
type FieldError_StructNamespace_Call struct {
	*mock.Call
}

// StructNamespace is a helper method to define mock.On call
func (_e *FieldError_Expecter) StructNamespace() *FieldError_StructNamespace_Call {
	return &FieldError_StructNamespace_Call{Call: _e.mock.On("StructNamespace")}
}

func (_c *FieldError_StructNamespace_Call) Run(run func()) *FieldError_StructNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_StructNamespace_Call) Return(_a0 string) *FieldError_StructNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_StructNamespace_Call) RunAndReturn(run func() string) *FieldError_StructNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Tag provides a mock function with no fields
func (_m *FieldError) Tag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_Tag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tag'
type FieldError_Tag_Call struct {
	*mock.Call
}

// Tag is a helper method to define mock.On call
func (_e *FieldError_Expecter) Tag() *FieldError_Tag_Call {
	return &FieldError_Tag_Call{Call: _e.mock.On("Tag")}
}

func (_c *FieldError_Tag_Call) Run(run func()) *FieldError_Tag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Tag_Call) Return(_a0 string) *FieldError_Tag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Tag_Call) RunAndReturn(run func() string) *FieldError_Tag_Call {
	_c.Call.Return(run)
	return _c
}

// Translate provides a mock function with given fields: _a0
func (_m *FieldError) Translate(_a0 ut.Translator) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Translate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(ut.Translator) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FieldError_Translate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Translate'
type FieldError_Translate_Call struct {
	*mock.Call
}

// Translate is a helper method to define mock.On call
//   - _a0 ut.Translator
func (_e *FieldError_Expecter) Translate(_a0 interface{}) *FieldError_Translate_Call {
	return &FieldError_Translate_Call{Call: _e.mock.On("Translate", _a0)}
}

func (_c *FieldError_Translate_Call) Run(run func(_a0 ut.Translator)) *FieldError_Translate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ut.Translator))
	})
	return _c
}

func (_c *FieldError_Translate_Call) Return(_a0 string) *FieldError_Translate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Translate_Call) RunAndReturn(run func(ut.Translator) string) *FieldError_Translate_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *FieldError) Type() reflect.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// FieldError_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type FieldError_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *FieldError_Expecter) Type() *FieldError_Type_Call {
	return &FieldError_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *FieldError_Type_Call) Run(run func()) *FieldError_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Type_Call) Return(_a0 reflect.Type) *FieldError_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Type_Call) RunAndReturn(run func() reflect.Type) *FieldError_Type_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with no fields
func (_m *FieldError) Value() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// FieldError_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type FieldError_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *FieldError_Expecter) Value() *FieldError_Value_Call {
	return &FieldError_Value_Call{Call: _e.mock.On("Value")}
}

func (_c *FieldError_Value_Call) Run(run func()) *FieldError_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FieldError_Value_Call) Return(_a0 interface{}) *FieldError_Value_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FieldError_Value_Call) RunAndReturn(run func() interface{}) *FieldError_Value_Call {
	_c.Call.Return(run)
	return _c
}

// NewFieldError creates a new instance of FieldError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFieldError(t interface {
	mock.TestingT
	Cleanup(func())
}) *FieldError {
	mock := &FieldError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
