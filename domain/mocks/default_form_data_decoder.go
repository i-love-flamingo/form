// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	url "net/url"

	web "flamingo.me/flamingo/v3/framework/web"
)

// DefaultFormDataDecoder is an autogenerated mock type for the DefaultFormDataDecoder type
type DefaultFormDataDecoder struct {
	mock.Mock
}

type DefaultFormDataDecoder_Expecter struct {
	mock *mock.Mock
}

func (_m *DefaultFormDataDecoder) EXPECT() *DefaultFormDataDecoder_Expecter {
	return &DefaultFormDataDecoder_Expecter{mock: &_m.Mock}
}

// Decode provides a mock function with given fields: ctx, req, values, formData
func (_m *DefaultFormDataDecoder) Decode(ctx context.Context, req *web.Request, values url.Values, formData interface{}) (interface{}, error) {
	ret := _m.Called(ctx, req, values, formData)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Request, url.Values, interface{}) (interface{}, error)); ok {
		return rf(ctx, req, values, formData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Request, url.Values, interface{}) interface{}); ok {
		r0 = rf(ctx, req, values, formData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Request, url.Values, interface{}) error); ok {
		r1 = rf(ctx, req, values, formData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefaultFormDataDecoder_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type DefaultFormDataDecoder_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - ctx context.Context
//   - req *web.Request
//   - values url.Values
//   - formData interface{}
func (_e *DefaultFormDataDecoder_Expecter) Decode(ctx interface{}, req interface{}, values interface{}, formData interface{}) *DefaultFormDataDecoder_Decode_Call {
	return &DefaultFormDataDecoder_Decode_Call{Call: _e.mock.On("Decode", ctx, req, values, formData)}
}

func (_c *DefaultFormDataDecoder_Decode_Call) Run(run func(ctx context.Context, req *web.Request, values url.Values, formData interface{})) *DefaultFormDataDecoder_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Request), args[2].(url.Values), args[3].(interface{}))
	})
	return _c
}

func (_c *DefaultFormDataDecoder_Decode_Call) Return(_a0 interface{}, _a1 error) *DefaultFormDataDecoder_Decode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DefaultFormDataDecoder_Decode_Call) RunAndReturn(run func(context.Context, *web.Request, url.Values, interface{}) (interface{}, error)) *DefaultFormDataDecoder_Decode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDefaultFormDataDecoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewDefaultFormDataDecoder creates a new instance of DefaultFormDataDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDefaultFormDataDecoder(t mockConstructorTestingTNewDefaultFormDataDecoder) *DefaultFormDataDecoder {
	mock := &DefaultFormDataDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
