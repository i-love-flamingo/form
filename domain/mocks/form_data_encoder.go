// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// FormDataEncoder is an autogenerated mock type for the FormDataEncoder type
type FormDataEncoder struct {
	mock.Mock
}

type FormDataEncoder_Expecter struct {
	mock *mock.Mock
}

func (_m *FormDataEncoder) EXPECT() *FormDataEncoder_Expecter {
	return &FormDataEncoder_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields: ctx, formData
func (_m *FormDataEncoder) Encode(ctx context.Context, formData interface{}) (url.Values, error) {
	ret := _m.Called(ctx, formData)

	var r0 url.Values
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (url.Values, error)); ok {
		return rf(ctx, formData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) url.Values); ok {
		r0 = rf(ctx, formData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url.Values)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, formData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormDataEncoder_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type FormDataEncoder_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - ctx context.Context
//   - formData interface{}
func (_e *FormDataEncoder_Expecter) Encode(ctx interface{}, formData interface{}) *FormDataEncoder_Encode_Call {
	return &FormDataEncoder_Encode_Call{Call: _e.mock.On("Encode", ctx, formData)}
}

func (_c *FormDataEncoder_Encode_Call) Run(run func(ctx context.Context, formData interface{})) *FormDataEncoder_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *FormDataEncoder_Encode_Call) Return(_a0 url.Values, _a1 error) *FormDataEncoder_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FormDataEncoder_Encode_Call) RunAndReturn(run func(context.Context, interface{}) (url.Values, error)) *FormDataEncoder_Encode_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewFormDataEncoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewFormDataEncoder creates a new instance of FormDataEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFormDataEncoder(t mockConstructorTestingTNewFormDataEncoder) *FormDataEncoder {
	mock := &FormDataEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
