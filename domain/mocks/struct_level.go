// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"

	validator "github.com/go-playground/validator/v10"
)

// StructLevel is an autogenerated mock type for the StructLevel type
type StructLevel struct {
	mock.Mock
}

type StructLevel_Expecter struct {
	mock *mock.Mock
}

func (_m *StructLevel) EXPECT() *StructLevel_Expecter {
	return &StructLevel_Expecter{mock: &_m.Mock}
}

// Current provides a mock function with given fields:
func (_m *StructLevel) Current() reflect.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Current")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// StructLevel_Current_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Current'
type StructLevel_Current_Call struct {
	*mock.Call
}

// Current is a helper method to define mock.On call
func (_e *StructLevel_Expecter) Current() *StructLevel_Current_Call {
	return &StructLevel_Current_Call{Call: _e.mock.On("Current")}
}

func (_c *StructLevel_Current_Call) Run(run func()) *StructLevel_Current_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StructLevel_Current_Call) Return(_a0 reflect.Value) *StructLevel_Current_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StructLevel_Current_Call) RunAndReturn(run func() reflect.Value) *StructLevel_Current_Call {
	_c.Call.Return(run)
	return _c
}

// ExtractType provides a mock function with given fields: field
func (_m *StructLevel) ExtractType(field reflect.Value) (reflect.Value, reflect.Kind, bool) {
	ret := _m.Called(field)

	if len(ret) == 0 {
		panic("no return value specified for ExtractType")
	}

	var r0 reflect.Value
	var r1 reflect.Kind
	var r2 bool
	if rf, ok := ret.Get(0).(func(reflect.Value) (reflect.Value, reflect.Kind, bool)); ok {
		return rf(field)
	}
	if rf, ok := ret.Get(0).(func(reflect.Value) reflect.Value); ok {
		r0 = rf(field)
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	if rf, ok := ret.Get(1).(func(reflect.Value) reflect.Kind); ok {
		r1 = rf(field)
	} else {
		r1 = ret.Get(1).(reflect.Kind)
	}

	if rf, ok := ret.Get(2).(func(reflect.Value) bool); ok {
		r2 = rf(field)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// StructLevel_ExtractType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractType'
type StructLevel_ExtractType_Call struct {
	*mock.Call
}

// ExtractType is a helper method to define mock.On call
//   - field reflect.Value
func (_e *StructLevel_Expecter) ExtractType(field interface{}) *StructLevel_ExtractType_Call {
	return &StructLevel_ExtractType_Call{Call: _e.mock.On("ExtractType", field)}
}

func (_c *StructLevel_ExtractType_Call) Run(run func(field reflect.Value)) *StructLevel_ExtractType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Value))
	})
	return _c
}

func (_c *StructLevel_ExtractType_Call) Return(value reflect.Value, kind reflect.Kind, nullable bool) *StructLevel_ExtractType_Call {
	_c.Call.Return(value, kind, nullable)
	return _c
}

func (_c *StructLevel_ExtractType_Call) RunAndReturn(run func(reflect.Value) (reflect.Value, reflect.Kind, bool)) *StructLevel_ExtractType_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function with given fields:
func (_m *StructLevel) Parent() reflect.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Parent")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// StructLevel_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'
type StructLevel_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call
func (_e *StructLevel_Expecter) Parent() *StructLevel_Parent_Call {
	return &StructLevel_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *StructLevel_Parent_Call) Run(run func()) *StructLevel_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StructLevel_Parent_Call) Return(_a0 reflect.Value) *StructLevel_Parent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StructLevel_Parent_Call) RunAndReturn(run func() reflect.Value) *StructLevel_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// ReportError provides a mock function with given fields: field, fieldName, structFieldName, tag, param
func (_m *StructLevel) ReportError(field interface{}, fieldName string, structFieldName string, tag string, param string) {
	_m.Called(field, fieldName, structFieldName, tag, param)
}

// StructLevel_ReportError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportError'
type StructLevel_ReportError_Call struct {
	*mock.Call
}

// ReportError is a helper method to define mock.On call
//   - field interface{}
//   - fieldName string
//   - structFieldName string
//   - tag string
//   - param string
func (_e *StructLevel_Expecter) ReportError(field interface{}, fieldName interface{}, structFieldName interface{}, tag interface{}, param interface{}) *StructLevel_ReportError_Call {
	return &StructLevel_ReportError_Call{Call: _e.mock.On("ReportError", field, fieldName, structFieldName, tag, param)}
}

func (_c *StructLevel_ReportError_Call) Run(run func(field interface{}, fieldName string, structFieldName string, tag string, param string)) *StructLevel_ReportError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *StructLevel_ReportError_Call) Return() *StructLevel_ReportError_Call {
	_c.Call.Return()
	return _c
}

func (_c *StructLevel_ReportError_Call) RunAndReturn(run func(interface{}, string, string, string, string)) *StructLevel_ReportError_Call {
	_c.Call.Return(run)
	return _c
}

// ReportValidationErrors provides a mock function with given fields: relativeNamespace, relativeActualNamespace, errs
func (_m *StructLevel) ReportValidationErrors(relativeNamespace string, relativeActualNamespace string, errs validator.ValidationErrors) {
	_m.Called(relativeNamespace, relativeActualNamespace, errs)
}

// StructLevel_ReportValidationErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportValidationErrors'
type StructLevel_ReportValidationErrors_Call struct {
	*mock.Call
}

// ReportValidationErrors is a helper method to define mock.On call
//   - relativeNamespace string
//   - relativeActualNamespace string
//   - errs validator.ValidationErrors
func (_e *StructLevel_Expecter) ReportValidationErrors(relativeNamespace interface{}, relativeActualNamespace interface{}, errs interface{}) *StructLevel_ReportValidationErrors_Call {
	return &StructLevel_ReportValidationErrors_Call{Call: _e.mock.On("ReportValidationErrors", relativeNamespace, relativeActualNamespace, errs)}
}

func (_c *StructLevel_ReportValidationErrors_Call) Run(run func(relativeNamespace string, relativeActualNamespace string, errs validator.ValidationErrors)) *StructLevel_ReportValidationErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(validator.ValidationErrors))
	})
	return _c
}

func (_c *StructLevel_ReportValidationErrors_Call) Return() *StructLevel_ReportValidationErrors_Call {
	_c.Call.Return()
	return _c
}

func (_c *StructLevel_ReportValidationErrors_Call) RunAndReturn(run func(string, string, validator.ValidationErrors)) *StructLevel_ReportValidationErrors_Call {
	_c.Call.Return(run)
	return _c
}

// Top provides a mock function with given fields:
func (_m *StructLevel) Top() reflect.Value {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Top")
	}

	var r0 reflect.Value
	if rf, ok := ret.Get(0).(func() reflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(reflect.Value)
	}

	return r0
}

// StructLevel_Top_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Top'
type StructLevel_Top_Call struct {
	*mock.Call
}

// Top is a helper method to define mock.On call
func (_e *StructLevel_Expecter) Top() *StructLevel_Top_Call {
	return &StructLevel_Top_Call{Call: _e.mock.On("Top")}
}

func (_c *StructLevel_Top_Call) Run(run func()) *StructLevel_Top_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StructLevel_Top_Call) Return(_a0 reflect.Value) *StructLevel_Top_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StructLevel_Top_Call) RunAndReturn(run func() reflect.Value) *StructLevel_Top_Call {
	_c.Call.Return(run)
	return _c
}

// Validator provides a mock function with given fields:
func (_m *StructLevel) Validator() *validator.Validate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validator")
	}

	var r0 *validator.Validate
	if rf, ok := ret.Get(0).(func() *validator.Validate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validator.Validate)
		}
	}

	return r0
}

// StructLevel_Validator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validator'
type StructLevel_Validator_Call struct {
	*mock.Call
}

// Validator is a helper method to define mock.On call
func (_e *StructLevel_Expecter) Validator() *StructLevel_Validator_Call {
	return &StructLevel_Validator_Call{Call: _e.mock.On("Validator")}
}

func (_c *StructLevel_Validator_Call) Run(run func()) *StructLevel_Validator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StructLevel_Validator_Call) Return(_a0 *validator.Validate) *StructLevel_Validator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StructLevel_Validator_Call) RunAndReturn(run func() *validator.Validate) *StructLevel_Validator_Call {
	_c.Call.Return(run)
	return _c
}

// NewStructLevel creates a new instance of StructLevel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStructLevel(t interface {
	mock.TestingT
	Cleanup(func())
}) *StructLevel {
	mock := &StructLevel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
